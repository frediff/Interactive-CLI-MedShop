import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.LinkedList;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.PriorityQueue;
import java.util.Comparator;

/*
This Code is Written By : SUBHAM GHOSH [ ROLL NO : 20CS10065 ]
SECOND YEAR UNDERGRADUATE STUDENT
DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING
IIT KHARAGPUR
*/

/*
Please read these comments before going through the code.

-> The program implements a command line model of online medicine shopping platform
-> The program maintains 5 important databases of Manufacturer, Customer, Delivery Agent, Product, Shop/Warehouse
-> In addition to this for faster retreival of information while adding and processing orders,
   we maintain a stock-list of shops grouped by pincode for each product and also maintain a directory
   of delivery agents grouped by pincode.
-> For database of each entity we implement a Hash Map data structure.
-> For each database associated with a entity the key is the ID and value is the entity-info such as name,
   inventory, pincode, etc.
-> For each warehouse the stocks of each product is maintained through a 2-tuple consisting of product ID
   and available copies. In addition to this for faster updation of inventory these tuples are maintained in
   hash maps with product Id as the key and copies available as the value.
-> HashMaps involve hashing and hence deletion, addition and retrieval run in expected O(1) time.
-> In addition we have to assign delivery agents for each order in a way such that each time
   a delivery agent with least deliveries made gets the chance. In order to make assignment of delivery
   agent for each order faster we implement heap data structure through priority queue and custom comparator
   class for assigning priorities to each delivery agent in a pincode.
-> The most important part being the user input, exception handling is seperately managed by a different class
   ErrorLessInputTaker.
-> For printing tables the functions are packaged under the Tabulator class.
-> Moreover the database of each entity maintains the column width for all the columns as data members.
-> As a thumb rule of object oriented programming, in the entire program for all classes the data members
   including the database (HashMap) itself are private and only the member functions are public.
-> All variable names as well as function names are self descriptive.
-> The UI is maintained in the OnlineMedicineShop class itself through some functions.
-> The proogram works by the following rules :
    + Each product has a manufacturer In case of unassigned manufacturer a message is shown during printing list of products.
    + Each member of an entity has a unique ID but two different members of two different entities might have the same Id.
      Inspite of this the program works efficiently without errors as each entity maintains its own independent database.
    + In case the assigned manufacturer of a product is deleted an appropriate message is shown during printing list of products.
    + Moreover for each customer we maintain data of unprocessed, processed and cancelled orders.
    + As mentioned processing and adding of orders are implemented through two different functions.
    + An order during processing can have three possibilites :
            - It remains unprocessed due to unavailability of delivery agent.
            - It is cancelled due to the shop/warehouse or the product getting deleted from database.
            - It gets processed by getting a delivery agent assigned
    + Note that an order is taken only when the product ordered is valid.
    + The customer has the option to choose the shop in his/her pincode.
    + During the taking of order a table is shown giving information about copies of product avalaible in each shop.
    + The order is added only when stocks are available.
    + Every operation like addition, deletion or any funtionality has realtime effect in this database.
    + In case of wrong user input the program halts the current work and goes back to the
      option menu from where you started doing that work.
    + Note that for an entity deletion the ID that was assigned to it is never reused as practically it might create
      problems as say a customer was deleted after his/her order was delivered. If the ID of this deleted
      customer is reused then looking at the database, the accountant might be falsely thinking that this
      new customer had ordered the product whereas it was never ordered by this customer actually.
    + ID for each entity is automatically generated by the system.

Concepts applied in this program :
:: Exception Handling
:: User friendly command line interface giving appropriate prompts for a successfull operation, error or about current work.
:: Heap data structure for priority queue
:: Hash Maps implementing hashing
:: Date time library functions
*/

public class OnlineMedicineShop { // contains the UI for command line
    public static void main(String args[]) {
        System.out.print("=========================================\n");
        System.out.print("   Welcome to our Online Medicine Shop\n");
        System.out.print("=========================================\n\n");
        System.out.println("Please choose from one of the options of what you want to do. You will be asked to enter the option number again in case of an exception.");
        System.out.println("For moving back to the previous hierarchy menu or for exiting current menu just enter 0.");
        System.out.print("\n\n::: MAIN MENU ->\n");
        System.out.println("[1] Manage the existing database");
        System.out.println("       -> involves addition, creation, updation,");
        System.out.println("          deletion and printing of existing entities");
        System.out.print('\n');
        System.out.println("[2] Add and Process Online Orders");
        System.out.println("       -> involves taking orders from ");
        System.out.println("          customers and processing them");
        System.out.print('\n');
        System.out.println("[0] To Exit");
        System.out.print('\n');
        System.out.print("Enter your option : ");
        int choice = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        while(choice!=0) {
            if(choice==1) manipulateDatabase();
            else if(choice==2) onlineOrdering();
            else if(choice==0) System.out.println("<> Exiting from portal.");
            else System.out.println("<> You should have entered within the option numbers provided.");
            System.out.print("\n\n::: MAIN MENU ->\n");
            System.out.println("[1] Manage the existing database");
            System.out.println("       -> involves addition, creation, updation,");
            System.out.println("          deletion and printing of existing entities");
            System.out.print('\n');
            System.out.println("[2] Add, Process and see History of Online Orders");
            System.out.println("       -> involves taking orders from customers, processing them");
            System.out.println("          and showing purchase/order history of a customer");
            System.out.print('\n');
            System.out.println("[0] To Exit");
            System.out.print('\n');
            System.out.print("Enter your option : ");
            choice = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        }
        System.out.println("<> Exiting from portal.");
    }

    public static void manipulateDatabase() {
        System.out.print("\n::: MANIPULATE DATABASE MENU ->\n");
        System.out.println("[1] Manage Database of Manufacturer.");
        System.out.println("[2] Manage Database of Product.");
        System.out.println("[3] Manage Database of Customer.");
        System.out.println("[4] Manage Database of Delivery Agent.");
        System.out.println("[5] Manage Database of Shops and Warehouses.");
        System.out.println("[0] To Exit");
        System.out.print('\n');
        System.out.print("Enter your option : ");
        int choice = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        while(choice!=0) {
            if(choice==1) manageManufacturerData();
            else if(choice==2) manageProductData();
            else if(choice==3) manageCustomerData();
            else if(choice==4) manageDeliveryAgentData();
            else if(choice==5) manageShopsAndWarehousesData();
            else if(choice==0) System.out.println("<> Moving to MAIN MENU.");
            else System.out.println("<> You should have entered within the option numbers provided.");
            System.out.print("\n::: MANIPULATE DATABASE MENU ->\n");
            System.out.println("[1] Manage Database of Manufacturer.");
            System.out.println("[2] Manage Database of Product.");
            System.out.println("[3] Manage Database of Customer.");
            System.out.println("[4] Manage Database of Delivery Agent.");
            System.out.println("[5] Manage Database of Shops and Warehouses.");
            System.out.println("[0] To Exit");
            System.out.print('\n');
            System.out.print("Enter your option : ");
            choice = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        }
        System.out.println("<> Moving to MAIN MENU.");
    }

    public static void onlineOrdering() {
        System.out.print("\n::: ONLINE ORDERING MENU ->\n");
        System.out.println("[1] Add an Order of a Product from a Customer.");
        System.out.println("[2] Process an Order.");
        System.out.println("[3] List Purchase History of Customer.");
        System.out.println("[0] To Exit");
        System.out.print('\n');
        System.out.print("Enter your option : ");
        int choice = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        while(choice!=0) {
            if(choice==1) Customer.takeOrderOfCustomer();
            else if(choice==2) OrderData.finalizeAndProcessOrder();
            else if(choice==3) Customer.printPurchaseHistory();
            else if(choice==0) System.out.println("<> Moving to MAIN MENU.");
            else System.out.println("<> You should have entered within the option numbers provided.");
            System.out.print("\n::: ONLINE ORDERING MENU ->\n");
            System.out.println("[1] Add an Order of a Product from a Customer.");
            System.out.println("[2] Process an Order.");
            System.out.println("[3] List Purchase History of Customer.");
            System.out.println("[0] To Exit");
            System.out.print('\n');
            System.out.print("Enter your option : ");
            choice = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        }
        System.out.println("<> Moving to MAIN MENU.");
    }

    public static void manageManufacturerData() {
        System.out.print("\n::: MANUFACTURER DATA MANAGEMENT MENU ->\n");
        System.out.println("[1] Create a Manufacturer.");
        System.out.println("[2] Print All Manufacturer.");
        System.out.println("[3] Delete a Manufacturer.");
        System.out.println("[4] Add a Product to Manufacturer.");
        System.out.println("[5] Print List of Products by a Manufacturer.");
        System.out.println("[0] To Exit");
        System.out.print('\n');
        System.out.print("Enter your option : ");
        int choice = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        while(choice!=0) {
            if(choice==1) Manufacturer.createManufacturer();
            else if(choice==2) Manufacturer.printManufacturer();
            else if(choice==3) Manufacturer.deleteManufacturer();
            else if(choice==4) Manufacturer.addProductToManufacturer();
            else if(choice==5) Manufacturer.printListOfProducts();
            else if(choice==0) System.out.println("<> Moving to MANIPULATE DATABASE MENU.");
            else System.out.println("<> You should have entered within the option numbers provided.");
            System.out.print("\n::: MANUFACTURER DATA MANAGEMENT MENU ->\n");
            System.out.println("[1] Create a Manufacturer.");
            System.out.println("[2] Print All Manufacturer.");
            System.out.println("[3] Delete a Manufacturer.");
            System.out.println("[4] Add a Product to Manufacturer.");
            System.out.println("[5] Print List of Products by a Manufacturer.");
            System.out.println("[0] To Exit");
            System.out.print('\n');
            System.out.print("Enter your option : ");
            choice = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        }
        System.out.println("<> Moving to MANIPULATE DATABASE MENU.");
    }

    public static void manageProductData() {
        System.out.print("\n::: PRODUCT DATA MANAGEMENT MENU ->\n");
        System.out.println("[1] Create a Product.");
        System.out.println("[2] Print All Product.");
        System.out.println("[3] Delete a Product.");
        System.out.println("[0] To Exit");
        System.out.print('\n');
        System.out.print("Enter your option : ");
        int choice = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        while(choice!=0) {
            if(choice==1) Product.createNewProduct();
            else if(choice==2) Product.printAllProductList();
            else if(choice==3) Product.deleteProduct();
            else if(choice==0) System.out.println("<> Moving to MANIPULATE DATABASE MENU.");
            else System.out.println("<> You should have entered within the option numbers provided.");
            System.out.print("\n::: PRODUCT DATA MANAGEMENT MENU ->\n");
            System.out.println("[1] Create a Product.");
            System.out.println("[2] Print All Product.");
            System.out.println("[3] Delete a Product.");
            System.out.println("[0] To Exit");
            System.out.print('\n');
            System.out.print("Enter your option : ");
            choice = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        }
        System.out.println("<> Moving to MANIPULATE DATABASE MENU.");
    }

    public static void manageCustomerData() {
        System.out.print("\n::: CUSTOMER DATA MANAGEMENT MENU ->\n");
        System.out.println("[1] Create a Customer.");
        System.out.println("[2] Print All Customer.");
        System.out.println("[3] Delete a Customer.");
        System.out.println("[0] To Exit");
        System.out.print('\n');
        System.out.print("Enter your option : ");
        int choice = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        while(choice!=0) {
            if(choice==1) Customer.createCustomer();
            else if(choice==2) Customer.printCustomers();
            else if(choice==3) Customer.deleteCustomer();
            else if(choice==0) System.out.println("<> Moving to MANIPULATE DATABASE MENU.");
            else System.out.println("<> You should have entered within the option numbers provided.");
            System.out.print("\n::: CUSTOMER DATA MANAGEMENT MENU ->\n");
            System.out.println("[1] Create a Customer.");
            System.out.println("[2] Print All Customer.");
            System.out.println("[3] Delete a Customer.");
            System.out.println("[0] To Exit");
            System.out.print('\n');
            System.out.print("Enter your option : ");
            choice = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        }
        System.out.println("<> Moving to MANIPULATE DATABASE MENU.");
    }

    public static void manageDeliveryAgentData() {
        System.out.print("\n::: DELIVERY AGENT DATA MANAGEMENT MENU ->\n");
        System.out.println("[1] Create a Delivery Agent.");
        System.out.println("[2] Print All Delivery Agent.");
        System.out.println("[3] Delete a Delivery Agent.");
        System.out.println("[0] To Exit");
        System.out.print('\n');
        System.out.print("Enter your option : ");
        int choice = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        while(choice!=0) {
            if(choice==1) DeliveryAgent.createDeliveryAgent();
            else if(choice==2) DeliveryAgent.printDeliveryAgent();
            else if(choice==3) DeliveryAgent.deleteDeliveryAgent();
            else if(choice==0) System.out.println("<> Moving to MANIPULATE DATABASE MENU.");
            else System.out.println("<> You should have entered within the option numbers provided.");
            System.out.print("\n::: DELIVERY AGENT DATA MANAGEMENT MENU ->\n");
            System.out.println("[1] Create a Delivery Agent.");
            System.out.println("[2] Print All Delivery Agent.");
            System.out.println("[3] Delete a Delivery Agent.");
            System.out.println("[0] To Exit");
            System.out.print('\n');
            System.out.print("Enter your option : ");
            choice = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        }
        System.out.println("<> Moving to MANIPULATE DATABASE MENU.");
    }

    public static void manageShopsAndWarehousesData() {
        System.out.print("\n::: SHOPS/WAREHOUSE DATA MANAGEMENT MENU ->\n");
        System.out.println("[1] Create a Shop/Warehouse.");
        System.out.println("[2] Print All Shop/Warehouse.");
        System.out.println("[3] Delete a Shop/Warehouse.");
        System.out.println("[4] Add Copies of a Product to a Shop/Warehouse.");
        System.out.println("[5] List Inventory of a Shop/Warehouse.");
        System.out.println("[0] To Exit");
        System.out.print('\n');
        System.out.print("Enter your option : ");
        int choice = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        while(choice!=0) {
            if(choice==1) ShopsWarehouses.createShop();
            else if(choice==2) ShopsWarehouses.printShops();
            else if(choice==3) ShopsWarehouses.deleteShop();
            else if(choice==4) ShopsWarehouses.addCopiesOfProduct();
            else if(choice==5) ShopsWarehouses.printInventory();
            else if(choice==0) System.out.println("<> Moving to MANIPULATE DATABASE MENU.");
            else System.out.println("<> You should have entered within the option numbers provided.");
            System.out.print("\n::: SHOPS/WAREHOUSE DATA MANAGEMENT MENU ->\n");
            System.out.println("[1] Create a Shop/Warehouse.");
            System.out.println("[2] Print All Shop/Warehouse.");
            System.out.println("[3] Delete a Shop/Warehouse.");
            System.out.println("[4] Add Copies of a Product to a Shop/Warehouse.");
            System.out.println("[5] List Inventory of a Shop/Warehouse.");
            System.out.println("[0] To Exit");
            System.out.print('\n');
            System.out.print("Enter your option : ");
            choice = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        }
        System.out.println("<> Moving to MANIPULATE DATABASE MENU.");
    }

};

class ErrorLessInputTaker { // manages exceptions for error free input taking from user

    public static int takeANumberOtherwiseReturnMinusOne() {
        boolean integrity = true;
        Scanner scObj = new Scanner(System.in);
        Integer num=null;
        String str = scObj.nextLine();

        try {
            num = Integer.parseInt(str);
        } catch (NumberFormatException e) {
            integrity = false;
        }

        if(integrity) {
            if(num==null) return -1;
            else return num.intValue();
        }
        else {
            System.out.println("<> You should have entered a number.");
            return -1;
        }
    }

    public static int takePincodeOtherwiseReturnMinusOne() {
        boolean integrity = true;
        Scanner scObj = new Scanner(System.in);
        Integer num=null;
        String str = scObj.nextLine();

        try {
            num = Integer.parseInt(str);
        } catch (NumberFormatException e) {
            integrity = false;
        }
        int inp;
        if(integrity) {
            if(num==null) return -1;
            else inp = num.intValue();
            if(inp>999999 || inp<100000) {
                System.out.println("<> You should have entered a 6-digit number.");
                return -1;
            }
            else {
                return inp;
            }
        }
        else {
            System.out.println("<> You should have entered a number.");
            return -1;
        }
    }
};

class Tabulator { // functions for printing table borders and spacings

    private static void dashPrint(int w) {
        for(int i=0;i<(w+2);++i) System.out.print("-");
    }

    public static void colSixPrinter(int w1, int w2, int w3, int w4, int w5, int w6) {
        System.out.print("+");
        dashPrint(w1);
        System.out.print("+");
        dashPrint(w2);
        System.out.print("+");
        dashPrint(w3);
        System.out.print("+");
        dashPrint(w4);
        System.out.print("+");
        dashPrint(w5);
        System.out.print("+");
        dashPrint(w6);
        System.out.print("+");
    }

    public static void colTwoPrinter(int w1, int w2) {
        System.out.print("+");
        dashPrint(w1);
        System.out.print("+");
        dashPrint(w2);
        System.out.print("+");
    }

    public static void colThreePrinter(int w1, int w2, int w3) {
        System.out.print("+");
        dashPrint(w1);
        System.out.print("+");
        dashPrint(w2);
        System.out.print("+");
        dashPrint(w3);
        System.out.print("+");
    }

    public static void spacePrint(int w) {
        for(int i=0;i<w;++i) System.out.print(" ");
    }
};

class OrderInfo { // this contains auxiliary information associated with each order
    private LocalDateTime timeStamp; // time of order made by customer
    private int productId; // ID of the product
    private int copies; // number of copies of the product ordered
    private int deliveryAgentId; // the ID of delivery agent assigned
    private int sellerId; // it is the ID of the shop or warehouse from which the product is shipped
    private int customerId; // it is the ID of the customer who made this order
    private int orderId;

    public void printProductId() {
        System.out.print(this.productId); // prints odered product ID
    };

    public void printCopies() {
        System.out.print(this.copies); // prints number of copies of product orderd
    };

    public void printOrderTime() {
        // prints the time of order in the format -> Day, DD-MMM-YYYY HH:mm:ss
        DateTimeFormatter dateObject = DateTimeFormatter.ofPattern("E, dd-MMM-yyy HH:mm:ss");
        String formattedTimeEntry = this.timeStamp.format(dateObject);
        System.out.print(formattedTimeEntry);
    };

    public void printSellerId() {
        System.out.print(this.sellerId);
    }

    public void printOrderId() {
        System.out.print(this.orderId);
    }

    public void printDeliveryAgentId() {
        if(deliveryAgentId == 0) {
            System.out.print("Unassigned");
        }
        else {
            System.out.print(deliveryAgentId);
        }
    }

    public OrderInfo(int autoId,int custId,int prodId,int copiesOfProduct,int shopId) {
        this.orderId = autoId;
        this.timeStamp = LocalDateTime.now();
        this.productId = prodId;
        this.copies = copiesOfProduct;
        this.customerId = custId;
        this.deliveryAgentId = 0;
        this.sellerId = shopId;
    }

    public int getLenProductId() {
        return String.valueOf(this.productId).length(); // prints odered product ID
    };

    public int getLenCopies() {
        return String.valueOf(this.copies).length(); // prints number of copies of product orderd
    };

    public int getLenSellerId() {
        return String.valueOf(this.sellerId).length();
    }

    public int getLenOrderId() {
        return String.valueOf(this.orderId).length();
    }

    public int getLenDeliveryAgentId() {
        if(deliveryAgentId == 0) {
            return String.valueOf("Unassigned").length();
        }
        else {
            return String.valueOf(deliveryAgentId).length();
        }
    }

    public int getCustId() {
        return this.customerId;
    }

    public boolean assignDeliveryAgent() {
        deliveryAgentId = DeliveryAgentDirectory.getDeliveryAgentFromCurrentQueue(Customer.getZipCodeFromCustomerData(customerId));
        if(deliveryAgentId==0) return false;
        else {
            Customer.migrateOrderWithinCustomerDatabase(customerId,orderId);
            return true;
        }
    }

    public boolean integrityCheck() {
        if(Product.isAbsent(productId)) {
            System.out.println("<> The order is cancelled due to Product deletion from database.");
            Customer.moveToCancelledOrders(customerId,orderId);
            return false;
        }
        if(ShopsWarehouses.isAbsent(sellerId)) {
            System.out.println("<> The order is cancelled due to Shop/Warehouse deletion from database.");
            Customer.moveToCancelledOrders(customerId,orderId);
            return false;
        }
        return true;
    }

    public void releaseOutStocks(int zipcode) {
        Product.releaseStock(productId,zipcode,sellerId,copies);
        ShopsWarehouses.releaseStockOfInventory(sellerId,productId,copies);
    }
};

class OrderData { // this is the database of all unprocessed orders currently in the system
    private static HashMap<Integer,OrderInfo> unprocessedOrderData = new HashMap<>();
    private static int autoIdGenerate = 0;

    private static int orderIdLen = 8; //order id
    //private static int orderTimeLen = 13; //time of order //
    private static int productIdLen = 10; //product id
    private static int copiesLen = 6; //copies
    private static int sellerIdLen = 9; //seller id
    private static int deliveryAgentIdLen = 17; //delivery agent id

    public static int createAnOrder(int custId,int prodId,int copiesOfProduct,int shopId) {
        ++autoIdGenerate;
        unprocessedOrderData.put(autoIdGenerate,new OrderInfo(autoIdGenerate,custId,prodId,copiesOfProduct,shopId));

        orderIdLen = (orderIdLen > String.valueOf(autoIdGenerate).length()) ? orderIdLen : String.valueOf(autoIdGenerate).length();
        productIdLen = (productIdLen > String.valueOf(prodId).length()) ? productIdLen : String.valueOf(prodId).length();
        copiesLen = (copiesLen > String.valueOf(copiesOfProduct).length()) ? copiesLen : String.valueOf(copiesOfProduct).length();
        sellerIdLen = (sellerIdLen > String.valueOf(shopId).length()) ? sellerIdLen : String.valueOf(shopId).length();
        deliveryAgentIdLen = (deliveryAgentIdLen > String.valueOf("Unassigned").length()) ? deliveryAgentIdLen : String.valueOf("Unassigned").length();
        return autoIdGenerate;
    }

    public static void printUnprocessedOrders() {
        System.out.print("\n");
        if(unprocessedOrderData.isEmpty()) {
            System.out.println("<> There are no unprocessed orders in the database.");
            return ;
        }
        System.out.println("<> Printing unprocessed orders present in database.");

        Tabulator.colSixPrinter(orderIdLen,25,productIdLen,copiesLen,sellerIdLen,deliveryAgentIdLen);
        System.out.print("\n");

        System.out.print("| ");
        System.out.print("Order ID");
        Tabulator.spacePrint(orderIdLen-7);

        System.out.print("| ");
        System.out.print("Time of Order");
        Tabulator.spacePrint(25-12);

        System.out.print("| ");
        System.out.print("Product ID");
        Tabulator.spacePrint(productIdLen-9);

        System.out.print("| ");
        System.out.print("Copies");
        Tabulator.spacePrint(copiesLen-5);

        System.out.print("| ");
        System.out.print("Seller ID");
        Tabulator.spacePrint(sellerIdLen-8);

        System.out.print("| ");
        System.out.print("Delivery Agent ID");
        Tabulator.spacePrint(deliveryAgentIdLen-16);

        System.out.print("|\n");
        Tabulator.colSixPrinter(orderIdLen,25,productIdLen,copiesLen,sellerIdLen,deliveryAgentIdLen);
        System.out.print("\n");

        for(Map.Entry<Integer,OrderInfo> iterator : unprocessedOrderData.entrySet()) {
            System.out.print("| ");
            iterator.getValue().printOrderId();
            Tabulator.spacePrint(1+orderIdLen-iterator.getValue().getLenOrderId());

            System.out.print("| ");
            iterator.getValue().printOrderTime();
            Tabulator.spacePrint(1);

            System.out.print("| ");
            iterator.getValue().printProductId();
            Tabulator.spacePrint(1+productIdLen-iterator.getValue().getLenProductId());

            System.out.print("| ");
            iterator.getValue().printCopies();
            Tabulator.spacePrint(1+copiesLen-iterator.getValue().getLenCopies());

            System.out.print("| ");
            iterator.getValue().printSellerId();
            Tabulator.spacePrint(1+sellerIdLen-iterator.getValue().getLenSellerId());

            System.out.print("| ");
            iterator.getValue().printDeliveryAgentId();
            Tabulator.spacePrint(1+deliveryAgentIdLen-iterator.getValue().getLenDeliveryAgentId());

            System.out.print("|\n");
            Tabulator.colSixPrinter(orderIdLen,25,productIdLen,copiesLen,sellerIdLen,deliveryAgentIdLen);
            System.out.print("\n");
        }
        System.out.print("\n");
    }

    public static OrderInfo getUnprocessedOrderInfo(int orderId) {
        return unprocessedOrderData.get(orderId);
    }

    public static void finalizeAndProcessOrder() {
        System.out.print("\n");
        if(unprocessedOrderData.isEmpty()) {
            System.out.println("<> Sorry there are currently no unprocessed orders in the database.");
        }
        else {
            System.out.println("<> These are currently the unprocessed orders. Choose the Order you want to process.");
            printUnprocessedOrders();
            System.out.print("Enter Order ID of chosen Order : ");
            int orderId = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
            if(orderId==-1) {
                System.out.println("<> Sorry but halting current operation/work due to error/exception in user input.");
                return ;
            }
            if(unprocessedOrderData.get(orderId)==null) {
                System.out.println("<> Sorry such an order ID was not present in the list of unprocessed orders.");
            }
            else {
                if(unprocessedOrderData.get(orderId).integrityCheck()) {
                    if(unprocessedOrderData.get(orderId).assignDeliveryAgent()) {
                        migrateOutOrder(orderId);
                        System.out.println("<> Order successfully processed.");
                    }
                    else {
                        System.out.println("<> Sorry a delivery agent could not be assigned due to unavailability.");
                    }
                }
                else migrateOutOrder(orderId);
            }
        }
        System.out.print("\n");
    }

    public static void migrateOutOrder(int orderId) {
        unprocessedOrderData.remove(orderId);
    }

    public static void removeUnprocessedOrderDueToCustomerDeletion(int orderId,int zipcode) {
        unprocessedOrderData.get(orderId).releaseOutStocks(zipcode);
        unprocessedOrderData.remove(orderId);
    }
};

class CustomerInfo { // this contains auxiliary information associated with a customer
    private String name; // name of customer
    private int zipcode;
    private HashMap<Integer,OrderInfo> processedOrderHistory;
    private HashMap<Integer,OrderInfo> unprocessedOrderHistory;
    private HashMap<Integer,OrderInfo> cancelledOrderHistory;

    private int orderIdLen = 8; //order id
    //private static int orderTimeLen = 13; //time of order //
    private int productIdLen = 10; //product id
    private int copiesLen = 6; //copies
    private int sellerIdLen = 9; //seller id
    private int deliveryAgentIdLen = 17; //delivery agent id

    public CustomerInfo(String custName,int inputZipCode) {
        this.name = custName;
        this.zipcode = inputZipCode;
        processedOrderHistory = new HashMap<>();
        unprocessedOrderHistory = new HashMap<>();
        cancelledOrderHistory = new HashMap<>();

        this.orderIdLen = 8; //order id
        //private static int orderTimeLen = 13; //time of order //
        this.productIdLen = 10; //product id
        this.copiesLen = 6; //copies
        this.sellerIdLen = 9; //seller id
        this.deliveryAgentIdLen = 17; //delivery agent id
    }

    public void addOrderToHistory(int OrderId) {
        unprocessedOrderHistory.put(OrderId,OrderData.getUnprocessedOrderInfo(OrderId));
    }

    public void printName() {
        System.out.print(this.name); // prints name of customer
    }

    public void printZipcode() {
        System.out.print(zipcode);
    }

    public int getNameLength() {
        return this.name.length();
    }

    public int getZipcode() {
        return this.zipcode;
    }

    public void printUnprocessedOrderHistory() {
        System.out.print("\n");
        if(unprocessedOrderHistory.isEmpty()) {
            System.out.println("<> There are no unprocessed orders in the database for this customer.");
            return ;
        }
        System.out.println("<> Printing unprocessed orders present in database.");

        Tabulator.colSixPrinter(orderIdLen,25,productIdLen,copiesLen,sellerIdLen,deliveryAgentIdLen);
        System.out.print("\n");

        System.out.print("| ");
        System.out.print("Order ID");
        Tabulator.spacePrint(orderIdLen-7);

        System.out.print("| ");
        System.out.print("Time of Order");
        Tabulator.spacePrint(25-12);

        System.out.print("| ");
        System.out.print("Product ID");
        Tabulator.spacePrint(productIdLen-9);

        System.out.print("| ");
        System.out.print("Copies");
        Tabulator.spacePrint(copiesLen-5);

        System.out.print("| ");
        System.out.print("Seller ID");
        Tabulator.spacePrint(sellerIdLen-8);

        System.out.print("| ");
        System.out.print("Delivery Agent ID");
        Tabulator.spacePrint(deliveryAgentIdLen-16);

        System.out.print("|\n");
        Tabulator.colSixPrinter(orderIdLen,25,productIdLen,copiesLen,sellerIdLen,deliveryAgentIdLen);
        System.out.print("\n");

        for(Map.Entry<Integer,OrderInfo> iterator : unprocessedOrderHistory.entrySet()) {
            System.out.print("| ");
            iterator.getValue().printOrderId();
            Tabulator.spacePrint(1+orderIdLen-iterator.getValue().getLenOrderId());

            System.out.print("| ");
            iterator.getValue().printOrderTime();
            Tabulator.spacePrint(1);

            System.out.print("| ");
            iterator.getValue().printProductId();
            Tabulator.spacePrint(1+productIdLen-iterator.getValue().getLenProductId());

            System.out.print("| ");
            iterator.getValue().printCopies();
            Tabulator.spacePrint(1+copiesLen-iterator.getValue().getLenCopies());

            System.out.print("| ");
            iterator.getValue().printSellerId();
            Tabulator.spacePrint(1+sellerIdLen-iterator.getValue().getLenSellerId());

            System.out.print("| ");
            iterator.getValue().printDeliveryAgentId();
            Tabulator.spacePrint(1+deliveryAgentIdLen-iterator.getValue().getLenDeliveryAgentId());

            System.out.print("|\n");
            Tabulator.colSixPrinter(orderIdLen,25,productIdLen,copiesLen,sellerIdLen,deliveryAgentIdLen);
            System.out.print("\n");
        }
        System.out.print("\n");
    }

    public void printProcessedOrderHistory() {
        System.out.print("\n");
        if(processedOrderHistory.isEmpty()) {
            System.out.println("<> There are no processed orders in the database for this customer.");
            return ;
        }
        System.out.println("<> Printing processed orders present in database.");

        Tabulator.colSixPrinter(orderIdLen,25,productIdLen,copiesLen,sellerIdLen,deliveryAgentIdLen);
        System.out.print("\n");

        System.out.print("| ");
        System.out.print("Order ID");
        Tabulator.spacePrint(orderIdLen-7);

        System.out.print("| ");
        System.out.print("Time of Order");
        Tabulator.spacePrint(25-12);

        System.out.print("| ");
        System.out.print("Product ID");
        Tabulator.spacePrint(productIdLen-9);

        System.out.print("| ");
        System.out.print("Copies");
        Tabulator.spacePrint(copiesLen-5);

        System.out.print("| ");
        System.out.print("Seller ID");
        Tabulator.spacePrint(sellerIdLen-8);

        System.out.print("| ");
        System.out.print("Delivery Agent ID");
        Tabulator.spacePrint(deliveryAgentIdLen-16);

        System.out.print("|\n");
        Tabulator.colSixPrinter(orderIdLen,25,productIdLen,copiesLen,sellerIdLen,deliveryAgentIdLen);
        System.out.print("\n");

        for(Map.Entry<Integer,OrderInfo> iterator : processedOrderHistory.entrySet()) {
            System.out.print("| ");
            iterator.getValue().printOrderId();
            Tabulator.spacePrint(1+orderIdLen-iterator.getValue().getLenOrderId());

            System.out.print("| ");
            iterator.getValue().printOrderTime();
            Tabulator.spacePrint(1);

            System.out.print("| ");
            iterator.getValue().printProductId();
            Tabulator.spacePrint(1+productIdLen-iterator.getValue().getLenProductId());

            System.out.print("| ");
            iterator.getValue().printCopies();
            Tabulator.spacePrint(1+copiesLen-iterator.getValue().getLenCopies());

            System.out.print("| ");
            iterator.getValue().printSellerId();
            Tabulator.spacePrint(1+sellerIdLen-iterator.getValue().getLenSellerId());

            System.out.print("| ");
            iterator.getValue().printDeliveryAgentId();
            Tabulator.spacePrint(1+deliveryAgentIdLen-iterator.getValue().getLenDeliveryAgentId());

            System.out.print("|\n");
            Tabulator.colSixPrinter(orderIdLen,25,productIdLen,copiesLen,sellerIdLen,deliveryAgentIdLen);
            System.out.print("\n");
        }
        System.out.print("\n");
    }

    public void printCancelledOrderHistory() {
        System.out.print("\n");
        if(cancelledOrderHistory.isEmpty()) {
            System.out.println("<> There are no cancelled orders in the database for this customer.");
            return ;
        }
        System.out.println("<> Printing cancelled orders present in database.");

        Tabulator.colSixPrinter(orderIdLen,25,productIdLen,copiesLen,sellerIdLen,deliveryAgentIdLen);
        System.out.print("\n");

        System.out.print("| ");
        System.out.print("Order ID");
        Tabulator.spacePrint(orderIdLen-7);

        System.out.print("| ");
        System.out.print("Time of Order");
        Tabulator.spacePrint(25-12);

        System.out.print("| ");
        System.out.print("Product ID");
        Tabulator.spacePrint(productIdLen-9);

        System.out.print("| ");
        System.out.print("Copies");
        Tabulator.spacePrint(copiesLen-5);

        System.out.print("| ");
        System.out.print("Seller ID");
        Tabulator.spacePrint(sellerIdLen-8);

        System.out.print("| ");
        System.out.print("Delivery Agent ID");
        Tabulator.spacePrint(deliveryAgentIdLen-16);

        System.out.print("|\n");
        Tabulator.colSixPrinter(orderIdLen,25,productIdLen,copiesLen,sellerIdLen,deliveryAgentIdLen);
        System.out.print("\n");

        for(Map.Entry<Integer,OrderInfo> iterator : cancelledOrderHistory.entrySet()) {
            System.out.print("| ");
            iterator.getValue().printOrderId();
            Tabulator.spacePrint(1+orderIdLen-iterator.getValue().getLenOrderId());

            System.out.print("| ");
            iterator.getValue().printOrderTime();
            Tabulator.spacePrint(1);

            System.out.print("| ");
            iterator.getValue().printProductId();
            Tabulator.spacePrint(1+productIdLen-iterator.getValue().getLenProductId());

            System.out.print("| ");
            iterator.getValue().printCopies();
            Tabulator.spacePrint(1+copiesLen-iterator.getValue().getLenCopies());

            System.out.print("| ");
            iterator.getValue().printSellerId();
            Tabulator.spacePrint(1+sellerIdLen-iterator.getValue().getLenSellerId());

            System.out.print("| ");
            iterator.getValue().printDeliveryAgentId();
            Tabulator.spacePrint(1+deliveryAgentIdLen-iterator.getValue().getLenDeliveryAgentId());

            System.out.print("|\n");
            Tabulator.colSixPrinter(orderIdLen,25,productIdLen,copiesLen,sellerIdLen,deliveryAgentIdLen);
            System.out.print("\n");
        }
        System.out.print("\n");
    }

    public void clearOrderData() {
        for(Map.Entry<Integer,OrderInfo> iterator : unprocessedOrderHistory.entrySet()) {
            OrderData.removeUnprocessedOrderDueToCustomerDeletion(iterator.getKey(),zipcode);
        }
        unprocessedOrderHistory.clear();
        processedOrderHistory.clear();
        cancelledOrderHistory.clear();
    }

    public void moveFromUnprocessedToProcessed(int orderId) {
        processedOrderHistory.put(orderId,unprocessedOrderHistory.get(orderId));
        unprocessedOrderHistory.remove(orderId);
        int curDelivIdLen = processedOrderHistory.get(orderId).getLenDeliveryAgentId();
        deliveryAgentIdLen = (deliveryAgentIdLen > curDelivIdLen) ? deliveryAgentIdLen : curDelivIdLen;
    }

    public void cancelOrder(int orderId) {
        cancelledOrderHistory.put(orderId,unprocessedOrderHistory.get(orderId));
        unprocessedOrderHistory.remove(orderId);
    }
};

class Customer { // the database of customers is present here
    private static HashMap<Integer,CustomerInfo> customerData = new HashMap<>(); // the customer data
    // the integer key in the HashMap

    private static int dataSize = 0;
    private static int autoIdGenerate = 0;

    private static int custIdLen = 11;
    private static int custNameLen = 13;

    public static void takeOrderOfCustomer() {
        System.out.print("\n");
        System.out.println("<> Taking order from customer.");
        System.out.print("Enter Customer ID : ");
        int custId = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        if(custId==-1) {
            System.out.println("<> Sorry but halting current operation/work due to error/exception in user input.");
            return ;
        }
        if(customerData.get(custId) == null) {
            System.out.println("<> Sorry such an ID is not present in the database.");
        }
        else {
            System.out.print("Enter ID of product to be purchased : ");
            int prodId = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
            if(prodId==-1) {
                System.out.println("<> Sorry but halting current operation/work due to error/exception in user input.");
                return ;
            }
            if(Product.printStockInfo(prodId,customerData.get(custId).getZipcode())) {
                System.out.print("Enter the ID of the seller chosen by customer : ");
                int shopId = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
                if(shopId==-1) {
                    System.out.println("<> Sorry but halting current operation/work due to error/exception in user input.");
                    return ;
                }
                System.out.print("Enter the number of copies of the product you want to buy : ");
                int copiesOfProduct = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
                if(copiesOfProduct==-1) {
                    System.out.println("<> Sorry but halting current operation/work due to error/exception in user input.");
                    return ;
                }
                if(copiesOfProduct==0) {
                    System.out.println("<> Sorry you cannot order zero copies of a product.");
                    return ;
                }
                if(Product.checkAvailability(prodId,copiesOfProduct,shopId,customerData.get(custId).getZipcode())) {
                    ShopsWarehouses.changeStock(shopId,prodId,copiesOfProduct);
                    customerData.get(custId).addOrderToHistory(OrderData.createAnOrder(custId,prodId,copiesOfProduct,shopId));
                    System.out.println("<> Order taken and added to database of unprocessed orders successfully.");
                }
                else {
                    System.out.println("<> This product cannot be ordered right now due to unavailability.");
                }
            }
        }
        System.out.print("\n");
    }

    public static void moveToCancelledOrders(int custId,int orderId) {
        customerData.get(custId).cancelOrder(orderId);
    }

    public static void createCustomer() {
        System.out.print("\n");
        int custId;
        String custName;
        System.out.println("<> Creating a Customer");
        Scanner scObj = new Scanner(System.in);
        autoIdGenerate++;
        dataSize++;
        custId = autoIdGenerate;
        System.out.print("Assigned ID : " + custId);
        System.out.print("\nEnter Name : ");
        custName = scObj.nextLine();
        System.out.print("Enter zipcode (6-digit number) : ");
        int inputZipCode = ErrorLessInputTaker.takePincodeOtherwiseReturnMinusOne();
        if(inputZipCode==-1) {
            System.out.println("<> Sorry but halting current operation/work due to error/exception in user input.");
            --autoIdGenerate;
            --dataSize;
            return ;
        }
        customerData.put(custId,new CustomerInfo(custName,inputZipCode));
        custIdLen = (custIdLen > String.valueOf(custId).length()) ? custIdLen : String.valueOf(custId).length();
        custNameLen = (custNameLen > String.valueOf(custName).length()) ? custNameLen : String.valueOf(custName).length();
        System.out.println("<> Customer successfully created and added to database.");
        System.out.print("\n");
    }

    public static void printCustomers() {
        System.out.print("\n");
        if(dataSize == 0) {
           System.out.println("<> Sorry there are no customers yet.");
           return ;
        }
        System.out.println("<> Printing customer information present in database.");
        Tabulator.colThreePrinter(custIdLen,custNameLen,7);
        System.out.print("\n| Customer ID");
        Tabulator.spacePrint(custIdLen-10);
        System.out.print("| Customer Name");
        Tabulator.spacePrint(custNameLen-12);
        System.out.print("| ZipCode");
        Tabulator.spacePrint(1);
        System.out.print("|");
        System.out.print("\n");
        Tabulator.colThreePrinter(custIdLen,custNameLen,7);
        System.out.print("\n");

        for(Map.Entry<Integer,CustomerInfo> iterator : customerData.entrySet()) {
            System.out.print("| " + iterator.getKey());
            Tabulator.spacePrint(1 + custIdLen - String.valueOf(iterator.getKey()).length());
            System.out.print("| ");
            iterator.getValue().printName();
            Tabulator.spacePrint(1 + custNameLen - iterator.getValue().getNameLength());
            System.out.print("| ");
            iterator.getValue().printZipcode();
            Tabulator.spacePrint(2);
            System.out.print("|\n");
            Tabulator.colThreePrinter(custIdLen,custNameLen,7);
            System.out.print("\n");
        }
        System.out.print("\n");
    }

    public static void deleteCustomer() {
        System.out.print("\n");
        if(dataSize == 0) {
           System.out.println("<> Sorry there are no customers yet.");
           return ;
        }
        System.out.println("<> These are the customers in the database. Enter the ID of the customer you want to delete.");
        printCustomers();
        Scanner scObj = new Scanner(System.in);
        System.out.print("Enter the ID : ");
        int custId = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        if(custId==-1) {
            System.out.println("<> Sorry but halting current operation/work due to error/exception in user input.");
            return ;
        }
        if(customerData.get(custId)==null) {
            System.out.println("<> Sorry such an ID does not exist in the database.");
        }
        else {
            customerData.get(custId).clearOrderData();
            customerData.remove(custId);
            --dataSize;
            System.out.println("<> Successfully deleted.");
        }
        System.out.print("\n");
    }

    public static void printPurchaseHistory() {
        System.out.print("\n");
        System.out.print("Enter the ID of customer : ");
        int custId = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        if(custId==-1) {
            System.out.println("<> Sorry but halting current operation/work due to error/exception in user input.");
            return ;
        }
        if(customerData.get(custId)==null) {
            System.out.println("<> Sorry such an ID is not present in the database.");
        }
        else {
            customerData.get(custId).printUnprocessedOrderHistory();
            customerData.get(custId).printProcessedOrderHistory();
            customerData.get(custId).printCancelledOrderHistory();
        }
    }

    public static int getZipCodeFromCustomerData(int custId) {
        return customerData.get(custId).getZipcode();
    }

    public static void migrateOrderWithinCustomerDatabase(int custId,int orderId) {
        customerData.get(custId).moveFromUnprocessedToProcessed(orderId);
    }
};

class ShopsWarehousesInfo { // this contains auxiliary information associated with a shop/warehouse
    private String name; // name of seller
    private int zipcode; // zipcode of seller
    private HashMap<Integer,Integer> inventory; // the inventory of info and quantity of products in the shop or warehouse
    private int inventorySize;
    private int prodIdLen;
    private int prodNameLen;
    private int copiesLen;

    public void reduceStock(int prodId,int copies) {
        inventory.merge(prodId,-copies,Integer::sum);
    }

    public void updateInventory(int productId,int copies,int shopId) {
           Product.updateStockEntries(productId,copies,shopId,zipcode);
           Integer initialCopies = inventory.get(productId);
           if(initialCopies==null) {
               inventory.put(productId,copies);
               String productName = Product.getProductName(productId);
               int curLengthName = productName.length();
               int curLengthID = String.valueOf(productId).length();
               int curCopiesLen = String.valueOf(copies).length();
               prodNameLen = (prodNameLen > curLengthName) ? prodNameLen : curLengthName;
               prodIdLen =  (prodIdLen > curLengthID) ? prodIdLen : curLengthID;
               copiesLen =  (copiesLen > curCopiesLen) ? copiesLen : curCopiesLen;
               ++inventorySize;
           }
           else {
               inventory.put(productId,copies+initialCopies);
               int curCopiesLen = String.valueOf(copies+initialCopies).length();
               copiesLen =  (copiesLen > curCopiesLen) ? copiesLen : curCopiesLen;
           }
    }

    public ShopsWarehousesInfo(String shopName,int inputZipcode) {
        this.name = shopName;
        this.zipcode = inputZipcode;
        inventory = new HashMap<>();
        inventorySize = 0;;
        prodIdLen = 10;
        prodNameLen = 15;
        copiesLen = 16;
    }

    public void printName() {
        System.out.print(name);
    }

    public void printZipcode() {
        System.out.print(zipcode);
    }

    public void clearInventory(int shopId) {
        for(Map.Entry<Integer,Integer> iterator : inventory.entrySet()) {
            Product.clearStockEntry(iterator.getKey(),shopId,zipcode);
        }
        inventory.clear();
        inventorySize = 0;
    }

    public boolean isInventoryEmpty() {
        return (inventorySize==0);
    }

    public void printStocks() {
        System.out.print("\n");
        if(inventorySize==0) {
            System.out.println("<> Sorry this seller does not have any stocks available");
            return ;
        }
        System.out.println("<> Printing inventory present in database.");
        Tabulator.colThreePrinter(prodIdLen,prodNameLen,copiesLen);
        System.out.print("\n| Product ID");
        Tabulator.spacePrint(prodIdLen-9);
        System.out.print("| Name of Product");
        Tabulator.spacePrint(prodNameLen-14);
        System.out.print("| Copies Available");
        Tabulator.spacePrint(copiesLen-15);
        System.out.print("|");
        System.out.print("\n");
        Tabulator.colThreePrinter(prodIdLen,prodNameLen,copiesLen);
        System.out.print("\n");

        for(Map.Entry<Integer,Integer> iterator : inventory.entrySet()) {
            System.out.print("| " + iterator.getKey());
            Tabulator.spacePrint(1 + prodIdLen - String.valueOf(iterator.getKey()).length());
            System.out.print("| ");
            System.out.print(Product.getProductName(iterator.getKey()));
            Tabulator.spacePrint(1 + prodNameLen - Product.getProductName(iterator.getKey()).length());
            System.out.print("| ");
            System.out.print(iterator.getValue());
            Tabulator.spacePrint(1 + copiesLen - String.valueOf(iterator.getValue()).length());
            System.out.print("|\n");
            Tabulator.colThreePrinter(prodIdLen,prodNameLen,copiesLen);
            System.out.print("\n");
        }
        System.out.print("\n");
    }

    public void removeProductInList(int prodId) {
        inventory.remove(prodId);
        --inventorySize;
    }

    public int getNameLength() {
        return name.length();
    }

    public void reAddToInventory(int prodId,int copies) {
        if(inventory.get(prodId)!=null) {
            inventory.merge(prodId,copies,Integer::sum);
        }
    }
};

class ShopsWarehouses { // the database of sellers/shop/warehouse is present here
    private static HashMap<Integer,ShopsWarehousesInfo> sellerData = new HashMap<>(); // the data of shops and warehouses
    private static int dataSize = 0;
    private static int autoIdGenerate = 0;

    private static int shopIdLen = 12;
    private static int shopNameLen = 14;

    public static void changeStock(int shopId,int prodId,int copiesOfProduct) {
        sellerData.get(shopId).reduceStock(prodId,copiesOfProduct);
    }

    public static boolean isAbsent(int sellerId) {
        if(sellerData.get(sellerId)==null) return true;
        else return false;
    }

    public static void createShop() {
        System.out.print("\n");
        int shopId;
        String shopName;
        int zipcode;
        System.out.println("<> Creating a Shop or Warehouse.");
        Scanner scObj = new Scanner(System.in);
        autoIdGenerate++;
        dataSize++;
        shopId = autoIdGenerate;
        System.out.print("Assigned ID : " + shopId);
        System.out.print("\nEnter Name : ");
        shopName = scObj.nextLine();
        System.out.print("Enter ZipCode (6-digit number) : ");
        zipcode = ErrorLessInputTaker.takePincodeOtherwiseReturnMinusOne();
        if(zipcode==-1) {
            --autoIdGenerate;
            --dataSize;
            System.out.println("<> Sorry but halting current operation/work due to error/exception in user input.");
            return ;
        }
        sellerData.put(shopId,new ShopsWarehousesInfo(shopName,zipcode));
        shopIdLen = (shopIdLen > String.valueOf(shopId).length()) ? shopIdLen : String.valueOf(shopId).length();
        shopNameLen = (shopNameLen > String.valueOf(shopName).length()) ? shopNameLen : String.valueOf(shopName).length();
        System.out.println("<> Shop/Warehouse successfully created and added to database.");
        System.out.print("\n");
    }

    public static void printShops() {
        System.out.print("\n");
        if(dataSize == 0) {
           System.out.println("<> Sorry there are no sellers yet.");
           return ;
        }
        System.out.println("<> Printing shop/warehouse information present in database.");
        Tabulator.colThreePrinter(shopIdLen,shopNameLen,7);
        System.out.print("\n| ID of Seller");
        Tabulator.spacePrint(shopIdLen-11);
        System.out.print("| Name of Seller");
        Tabulator.spacePrint(shopNameLen-13);
        System.out.print("| ZipCode");
        Tabulator.spacePrint(1);
        System.out.print("|");
        System.out.print("\n");
        Tabulator.colThreePrinter(shopIdLen,shopNameLen,7);
        System.out.print("\n");

        for(Map.Entry<Integer,ShopsWarehousesInfo> iterator : sellerData.entrySet()) {
            System.out.print("| " + iterator.getKey());
            Tabulator.spacePrint(1 + shopIdLen - String.valueOf(iterator.getKey()).length());
            System.out.print("| ");
            iterator.getValue().printName();
            Tabulator.spacePrint(1 + shopNameLen - iterator.getValue().getNameLength());
            System.out.print("| ");
            iterator.getValue().printZipcode();
            Tabulator.spacePrint(2);
            System.out.print("|\n");
            Tabulator.colThreePrinter(shopIdLen,shopNameLen,7);
            System.out.print("\n");
        }
        System.out.print("\n");
    }

    public static void deleteShop() {
        System.out.print("\n");
        if(dataSize == 0) {
           System.out.println("<> Sorry there are no shops/warehouses yet.");
           return ;
        }
        System.out.println("<> These are the sellers in the database. Enter the ID of the seller you want to delete.");
        printShops();
        Scanner scObj = new Scanner(System.in);
        System.out.print("Enter the ID : ");
        int shopId = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        if(shopId==-1) {
            System.out.println("<> Sorry but halting current operation/work due to error/exception in user input.");
            return ;
        }
        if(sellerData.get(shopId)==null) {
            System.out.println("<> Sorry such an ID does not exist in the database.");
        }
        else {
            sellerData.get(shopId).clearInventory(shopId);
            sellerData.remove(shopId);
            --dataSize;
            System.out.println("<> Successfully deleted.");
        }
        System.out.print("\n");
    }

    public static void addCopiesOfProduct() {
        System.out.print("\n");
        if(dataSize == 0) {
           System.out.println("<> Sorry there are no sellers yet.");
           return ;
        }
        System.out.println("<> Adding copies of a product to a shop.");
        System.out.print("Enter product ID : ");
        int prodId = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        if(prodId==-1) {
            System.out.println("<> Sorry but halting current operation/work due to error/exception in user input.");
            return ;
        }
        if(Product.getProductName(prodId)==null) {
            System.out.println("<> Sorry such a product is not available in the database. First add product to database.");
            return ;
        }
        else {
            System.out.print("Enter seller ID : ");
            int shopId = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
            if(shopId==-1) {
                System.out.println("<> Sorry but halting current operation/work due to error/exception in user input.");
                return ;
            }
            if(sellerData.get(shopId)==null) {
                System.out.println("<> Sorry such a seller ID is absent in the database.");
                return ;
            }
            else {
                System.out.print("Enter number of copies : ");
                int copies = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
                if(copies==-1) {
                    System.out.println("<> Sorry but halting current operation/work due to error/exception in user input.");
                    return ;
                }
                sellerData.get(shopId).updateInventory(prodId,copies,shopId);
                System.out.println("<> Inventory successfully updated.");
            }
        }
        System.out.print("\n");
    }

    public static void printInventory() {
        System.out.print("\n");
        if(dataSize == 0) {
           System.out.println("<> Sorry there are no shops/warehouses yet.");
           return ;
        }
        System.out.println("<> Printing inventory of seller.");
        System.out.print("Enter ID of the seller : ");
        int shopId = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        if(shopId==-1) {
            System.out.println("<> Sorry but halting current operation/work due to error/exception in user input.");
            return ;
        }
        if(sellerData.get(shopId)==null) {
            System.out.println("<> Sorry such an ID does not exist in the database.");
        }
        else {
            if(sellerData.get(shopId).isInventoryEmpty()) {
                System.out.print("\n<> Sorry the inventory is empty.\n");
                return ;
            }
            sellerData.get(shopId).printStocks();
        }
    }

    public static void removeProductFromInventory(int prodId,int shopId) {
        sellerData.get(shopId).removeProductInList(prodId);
    }

    public static int getShopNameLength(int shopId) {
        return sellerData.get(shopId).getNameLength();
    }

    public static void printShopName(int shopId) {
        sellerData.get(shopId).printName();
    }

    public static void releaseStockOfInventory(int shopId,int prodId,int copies) {
        if(sellerData.get(shopId)!=null) {
            sellerData.get(shopId).reAddToInventory(prodId,copies);
        }
    }
};

class DeliveryAgentInfo { // this contains auxiliary information associated with a delivery agent
    String name; // name of delivery agent
    int countTransits; // number of delivery transits made by the agent
    int zipcode;
    int id;

    public DeliveryAgentInfo(String delivName,int inputZipCode,int autoId) {
        this.name = delivName;
        countTransits = 0;
        this.zipcode = inputZipCode;
        this.id = autoId;
    }

    public void printName() {
        System.out.print(name);
    }

    public int getNameLength() {
        return name.length();
    }

    public void printZipcode() {
        System.out.print(zipcode);
    }

    public int getCountTransits() {
        return this.countTransits;
    }

    public int getZipCode() {
        return this.zipcode;
    }

    public void increaseDeliveriesMade() {
        ++countTransits;
    }

    public int getId() {
        return this.id;
    }
};

class DeliveryAgent { // the database of delivery agent is present here
    private static HashMap<Integer,DeliveryAgentInfo> agentData = new HashMap<>(); // data of delivery agents

    private static int dataSize = 0;
    private static int autoIdGenerate = 0;

    private static int delivIdLen = 17;
    private static int delivNameLen = 19;

    public static void createDeliveryAgent() {
        System.out.print("\n");
        int delivId;
        String delivName;
        System.out.println("<> Creating a Delivery Agent.");
        Scanner scObj = new Scanner(System.in);
        autoIdGenerate++;
        dataSize++;
        delivId = autoIdGenerate;
        System.out.print("Assigned ID : " + delivId);
        System.out.print("\nEnter Name : ");
        delivName = scObj.nextLine();
        System.out.print("Enter ZipCode (6-digit number) : ");
        int inputZipCode = ErrorLessInputTaker.takePincodeOtherwiseReturnMinusOne();
        if(inputZipCode==-1) {
            --autoIdGenerate;
            --dataSize;
            System.out.println("<> Sorry but halting current operation/work due to error/exception in user input.");
            return ;
        }
        agentData.put(delivId,new DeliveryAgentInfo(delivName,inputZipCode,autoIdGenerate));
        delivIdLen = (delivIdLen > String.valueOf(delivId).length()) ? delivIdLen : String.valueOf(delivId).length();
        delivNameLen = (delivNameLen > String.valueOf(delivName).length()) ? delivNameLen : String.valueOf(delivName).length();
        DeliveryAgentDirectory.updateDirectory(agentData.get(delivId));
        System.out.println("<> Delivery Agent successfully created and added to database.");
        System.out.print("\n");
    }

    public static void printDeliveryAgent() {
        System.out.print("\n");
        if(dataSize == 0) {
           System.out.println("<> Sorry there are no Delivery Agents yet.");
           return ;
        }
        System.out.println("<> Printing Delivery Agent information present in database.");
        Tabulator.colThreePrinter(delivIdLen,delivNameLen,7);
        System.out.print("\n| Delivery Agent ID");
        Tabulator.spacePrint(delivIdLen-16);
        System.out.print("| Delivery Agent Name");
        Tabulator.spacePrint(delivNameLen-18);
        System.out.print("| ZipCode");
        Tabulator.spacePrint(1);
        System.out.print("|");
        System.out.print("\n");
        Tabulator.colThreePrinter(delivIdLen,delivNameLen,7);
        System.out.print("\n");

        for(Map.Entry<Integer,DeliveryAgentInfo> iterator : agentData.entrySet()) {
            System.out.print("| " + iterator.getKey());
            Tabulator.spacePrint(1 + delivIdLen - String.valueOf(iterator.getKey()).length());
            System.out.print("| ");
            iterator.getValue().printName();
            Tabulator.spacePrint(1 + delivNameLen - iterator.getValue().getNameLength());
            System.out.print("| ");
            iterator.getValue().printZipcode();
            Tabulator.spacePrint(2);
            System.out.print("|\n");
            Tabulator.colThreePrinter(delivIdLen,delivNameLen,7);
            System.out.print("\n");
        }
        System.out.print("\n");
    }

    public static void deleteDeliveryAgent() {
        System.out.print("\n");
        if(dataSize == 0) {
           System.out.println("<> Sorry there are no Delivary Agents yet.");
           return ;
        }
        System.out.println("<> These are the Delivery Agents in the database. Enter the ID of the agent you want to delete.");
        printDeliveryAgent();
        System.out.print("Enter the ID : ");
        int delivId = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        if(delivId==-1) {
            System.out.println("<> Sorry but halting current operation/work due to error/exception in user input.");
            return ;
        }
        if(agentData.get(delivId)==null) {
            System.out.println("<> Sorry such an ID does not exist in the database.");
        }
        else {
            //Data.get(shopId).clearInventory(shopId);
            DeliveryAgentDirectory.removeFromDirectory(agentData.get(delivId).getZipCode(),agentData.get(delivId));
            agentData.remove(delivId);
            --dataSize;
            System.out.println("<> Successfully deleted.");
        }
        System.out.print("\n");
    }

    public static int getDeliveries(int id) {
        return agentData.get(id).getCountTransits();
    }

    public static void incrementCountTransits(int delivId) {
        agentData.get(delivId).increaseDeliveriesMade();
    }
};

class DeliveryAgentInfoComparator implements Comparator<DeliveryAgentInfo>{ // custom comparator for comparing priorities of delivery agent
    public int compare(DeliveryAgentInfo a, DeliveryAgentInfo b) {
        int priorityA = -a.getCountTransits();
        int priorityB = -b.getCountTransits();
        if(priorityA < priorityB) return 1;
        else if(priorityA > priorityB) return -1;
        else return 0;
    }
}

class DeliveryQueue { // maintains priority queue of delivery agents in the current pincode
    PriorityQueue<DeliveryAgentInfo> currentQueue;

    public DeliveryQueue(DeliveryAgentInfo delivAgent) {
        currentQueue = new PriorityQueue<DeliveryAgentInfo>(10, new DeliveryAgentInfoComparator());
        currentQueue.add(delivAgent);
    }

    public void addToQueue(DeliveryAgentInfo delivAgent) {
        currentQueue.add(delivAgent);
    }

    public void removeFromQueue(DeliveryAgentInfo delivAgent) {
        currentQueue.remove(delivAgent);
    }

    public int getImpendingAgent() {
        DeliveryAgentInfo currentAgent = currentQueue.poll();
        if(currentAgent==null) {
            return 0;
        }
        else{
            currentAgent.increaseDeliveriesMade();
            currentQueue.add(currentAgent);
            return currentAgent.getId();
        }
    }
};

class DeliveryAgentDirectory { // contains delivery agent list grouped by zipcode
    private static HashMap<Integer,DeliveryQueue> directoryData = new HashMap<>();

    public static void updateDirectory(DeliveryAgentInfo delivAgent) {
        if(directoryData.get(delivAgent.getZipCode())==null) {
            directoryData.put(delivAgent.getZipCode(),new DeliveryQueue(delivAgent));
        }
        else {
            directoryData.get(delivAgent.getZipCode()).addToQueue(delivAgent);
        }
    }

    public static void removeFromDirectory(int zipcode,DeliveryAgentInfo delivAgent) {
        directoryData.get(zipcode).removeFromQueue(delivAgent);
    }

    public static int getDeliveryAgentFromCurrentQueue(int zipcode) {
        if(directoryData.get(zipcode)==null) return 0;
        return directoryData.get(zipcode).getImpendingAgent();
    }
};

class ManufacturerInfo { // this contains auxiliary information associated with a manufacturer
    private String name;
    private HashMap<Integer,String> productIdList;
    private int listSize;
    /*
    just below this comment, the declared data members are parameters used
    for printing data in a beautifully formatted table with necessary spaces
    */

    private int prodNameLen; // this specifies the column width of "Name of Product" column
    private int prodIdLen; // this specifies the column width of "Product ID" column

    public ManufacturerInfo(String mfName) {
        this.name = mfName;
        prodNameLen = 15;
        prodIdLen = 10;
        productIdList = new HashMap<>();
        listSize = 0;
    }

    public void printName() {
        System.out.print(name);
    }

    public int getNameLength() {
        return name.length();
    }

    public void addProductToList(int mfId) {
        System.out.print("\n");
        System.out.print("Enter product ID : ");
        int productId = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        if(productId==-1) {
            System.out.println("<> Sorry but halting current operation/work due to error/exception in user input.");
            return ;
        }
        if(productIdList.get(Integer.valueOf(productId))!=null) {
            System.out.println("<> Product has already been added before.");
        }
        else {
            String productName = Product.getProductName(productId);
            if(productName == null) {
                System.out.println("<> Sorry the product is not present in the database.");
            }
            else {
                if(Product.isManufacturerAssigned(productId)) {
                    System.out.println("<> Sorry the product already has a manufacturer assigned in the database.");
                }
                else {
                    productName = Product.getProductName(productId);
                    productIdList.put(productId,productName);
                    ++listSize;
                    Product.assignManufacturer(mfId,productId);
                    int curLengthName = productName.length();
                    int curLengthID = String.valueOf(productId).length();
                    prodNameLen = (prodNameLen > curLengthName) ? prodNameLen : curLengthName;
                    prodIdLen =  (prodIdLen > curLengthID) ? prodIdLen : curLengthID;
                    System.out.println("<> Product successfully added to list.");
                }
            }
        };
        System.out.print("\n");
    }

    public void printProductList() {
        System.out.print("\n");
        Tabulator.colTwoPrinter(prodIdLen,prodNameLen);
        System.out.print("\n| Product ID");
        Tabulator.spacePrint(prodIdLen-9);
        System.out.print("| Name of Product");
        Tabulator.spacePrint(prodNameLen-14);
        System.out.print("|");
        System.out.print("\n");
        Tabulator.colTwoPrinter(prodIdLen,prodNameLen);
        System.out.print("\n");

        for(Map.Entry<Integer,String> iterator : productIdList.entrySet()) {
            System.out.print("| " + iterator.getKey());
            Tabulator.spacePrint(1 + prodIdLen - String.valueOf(iterator.getKey()).length());
            System.out.print("| " + iterator.getValue());
            Tabulator.spacePrint(1 + prodNameLen - iterator.getValue().length());
            System.out.print("|\n");
            Tabulator.colTwoPrinter(prodIdLen,prodNameLen);
            System.out.print("\n");
        }
        System.out.print("\n");
    }

    public void clearProductEntry(int prodId) {
        productIdList.remove(prodId);
        --listSize;
    }

    public String getName() {
        return this.name;
    }

    public boolean isProdListEmpty() {
        return (listSize==0);
    }
};

class Manufacturer { // the database of manufacturers is present here
    private static HashMap<Integer,ManufacturerInfo> manufacturerData  = new HashMap<>();

    private static int mfIdLen = 15;
    private static int mfNameLen = 17;
    private static int dataSize = 0;
    private static int autoIdGenerate = 0;

    public static void addProductToManufacturer() {
        System.out.print("\n");
        System.out.println("<> Adding product to a manufacturer.");
        System.out.print("Enter the ID of the manufacturer : ");
        int manufacturerId = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        if(manufacturerId==-1) {
            System.out.println("<> Sorry but halting current operation/work due to error/exception in user input.");
            return ;
        }
        if(manufacturerData.get(Integer.valueOf(manufacturerId))==null) {
            System.out.println("<> This manufacturer ID is absent in the database. Check this ID or create a new manufacturer with this ID.");
        }
        else {
            manufacturerData.get(Integer.valueOf(manufacturerId)).addProductToList(manufacturerId);
        }
        System.out.print("\n");
    }

    public static void removeProduct(Integer mfId,int prodId) {
        if(manufacturerData.get(mfId)==null) return ;
        manufacturerData.get(mfId).clearProductEntry(prodId);
    }

    public static void printListOfProducts() {
        System.out.print("\n");
        System.out.println("<> Printing list of products by the manufacturer.");
        System.out.print("Enter ID of the manufacturer : ");
        int mfId = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        if(mfId==-1) {
            System.out.println("<> Sorry but halting current operation/work due to error/exception in user input.");
            return ;
        }
        if(manufacturerData.get(mfId)==null) {
            System.out.println("<> Sorry such an ID does not exist in the database.");
        }
        else {
            if(manufacturerData.get(mfId).isProdListEmpty()) {
                System.out.print("\n<> Sorry this manufacturer is currently not manufacturing any products.\n");
                return ;
            }
            manufacturerData.get(mfId).printProductList();
        }
    }

    public static void createManufacturer() {
        System.out.print("\n");
        int mfId;
        String mfName;
        System.out.println("<> Creating a Manufacturer.");
        Scanner scObj = new Scanner(System.in);
        autoIdGenerate++;
        dataSize++;
        mfId = autoIdGenerate;
        System.out.print("Assigned ID : " + mfId);
        System.out.print("\nEnter Name : ");
        mfName = scObj.nextLine();
        manufacturerData.put(mfId,new ManufacturerInfo(mfName));
        mfIdLen = (mfIdLen > String.valueOf(mfId).length()) ? mfIdLen : String.valueOf(mfId).length();
        mfNameLen = (mfNameLen > String.valueOf(mfName).length()) ? mfNameLen : String.valueOf(mfName).length();
        System.out.println("<> Manufacturer successfully created and added to database.");
        System.out.print("\n");
    }

    public static void printManufacturer() {
        System.out.print("\n");
        if(dataSize == 0) {
           System.out.println("<> Sorry there are no manufacturers yet.");
           return ;
        }
        System.out.println("<> Printing manufacturer information present in database.");
        Tabulator.colTwoPrinter(mfIdLen,mfNameLen);
        System.out.print("\n| Manufacturer ID");
        Tabulator.spacePrint(mfIdLen-14);
        System.out.print("| Manufacturer Name");
        Tabulator.spacePrint(mfNameLen-16);
        System.out.print("|");
        System.out.print("\n");
        Tabulator.colTwoPrinter(mfIdLen,mfNameLen);
        System.out.print("\n");

        for(Map.Entry<Integer,ManufacturerInfo> iterator : manufacturerData.entrySet()) {
            System.out.print("| " + iterator.getKey());
            Tabulator.spacePrint(1 + mfIdLen - String.valueOf(iterator.getKey()).length());
            System.out.print("| ");
            iterator.getValue().printName();
            Tabulator.spacePrint(1 + mfNameLen - iterator.getValue().getNameLength());
            System.out.print("|\n");
            Tabulator.colTwoPrinter(mfIdLen,mfNameLen);
            System.out.print("\n");
        }
        System.out.print("\n");
    }

    public static void deleteManufacturer() {
        System.out.print("\n");
        if(dataSize == 0) {
           System.out.println("<> Sorry there are no manufacturers yet.");
           return ;
        }
        System.out.println("<> These are the manufacturers in the database. Enter the ID of the manufacturer you want to delete.");
        printManufacturer();
        System.out.print("Enter the ID : ");
        int mfId = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        if(mfId==-1) {
            System.out.println("<> Sorry but halting current operation/work due to error/exception in user input.");
            return ;
        }
        if(manufacturerData.get(mfId)==null) {
            System.out.println("<> Sorry such an ID does not exist in the database.");
        }
        else {
            manufacturerData.remove(mfId);
            --dataSize;
            System.out.println("<> Successfully deleted.");
        }
        System.out.print("\n");
    }

    public static boolean isAbsent(int mfId) {
        if(manufacturerData.get(mfId)==null) return true;
        else return false;
    }

};

class ShopList { // contains local (per zipcode) stock information for a product
    private HashMap<Integer,Integer> sellerListStock;
    private int shopIdLen;
    private int copiesLen;
    private int shopNameLen;
    private long listSize;

    public int clearShopEntry(int shopId) {
        int copies = sellerListStock.get(shopId);
        sellerListStock.remove(shopId);
        --listSize;
        return copies;
    }

    public boolean checkStockAvailability(int shopId,int copies) {
        if(sellerListStock.get(shopId)==null) {
            System.out.println("<> The seller ID is absent in the local zipcode database.");
            return false;
        }
        else if(sellerListStock.get(shopId)<copies) {
            System.out.println("<> The specified seller does not have that many copies of the product available.");
            return false;
        }
        else {
            sellerListStock.merge(shopId,-copies,Integer::sum);
            return true;
        }
    }

    public ShopList(int copies,int shopId) {
        sellerListStock = new HashMap<>();
        sellerListStock.put(shopId,copies);
        listSize = 1;
        shopIdLen = 9;
        copiesLen = 10;
        shopNameLen = 11;
        shopIdLen = ( shopIdLen > String.valueOf(shopId).length() ) ? shopIdLen : String.valueOf(shopId).length();
        copiesLen = ( copiesLen > String.valueOf(copies).length() ) ? copiesLen : String.valueOf(copies).length();
        shopNameLen = ( shopNameLen > ShopsWarehouses.getShopNameLength(shopId)) ? shopNameLen : ShopsWarehouses.getShopNameLength(shopId);
    }

    public void AddShop(int shopId,int copies) {
        if(sellerListStock.get(shopId)==null) {
            ++listSize;
            sellerListStock.put(shopId,copies);
            shopIdLen = ( shopIdLen > String.valueOf(shopId).length() ) ? shopIdLen : String.valueOf(shopId).length();
            copiesLen = ( copiesLen > String.valueOf(copies).length() ) ? copiesLen : String.valueOf(copies).length();
            shopNameLen = ( shopNameLen > ShopsWarehouses.getShopNameLength(shopId)) ? shopNameLen : ShopsWarehouses.getShopNameLength(shopId);
        }
        else {
            int initialCopies = sellerListStock.get(shopId);
            sellerListStock.put(shopId,initialCopies+copies);
            copiesLen = ( copiesLen > String.valueOf(copies+initialCopies).length() ) ? copiesLen : String.valueOf(copies+initialCopies).length();
        }
    }

    public void clearSellerEntries(int prodId) {
        for(Map.Entry<Integer,Integer> iterator : sellerListStock.entrySet()) {
            ShopsWarehouses.removeProductFromInventory(prodId,iterator.getKey());
        }
        sellerListStock.clear();
        sellerListStock = null;
        listSize = 0;
    }

    public boolean printShopList() {
        if(listSize==0) {
            System.out.println("<> Sorry no stocks are available for this product.");
            return false;
        }
        else {
            System.out.print("\n");
            System.out.println("<> Printing local stock availability of the product within the customer zipcode.");
            Tabulator.colThreePrinter(shopIdLen,shopNameLen,copiesLen);
            System.out.print("\n| Seller ID");
            Tabulator.spacePrint(shopIdLen-8);
            System.out.print("| Seller Name");
            Tabulator.spacePrint(shopNameLen-10);
            System.out.print("| Stock Size");
            Tabulator.spacePrint(copiesLen-9);
            System.out.print("|");
            System.out.print("\n");
            Tabulator.colThreePrinter(shopIdLen,shopNameLen,copiesLen);
            System.out.print("\n");

            for(Map.Entry<Integer,Integer> iterator : sellerListStock.entrySet()) {
                System.out.print("| " + iterator.getKey());
                Tabulator.spacePrint(1 + shopIdLen - String.valueOf(iterator.getKey()).length());
                System.out.print("| ");
                ShopsWarehouses.printShopName(iterator.getKey());
                Tabulator.spacePrint(1 + shopNameLen - ShopsWarehouses.getShopNameLength(iterator.getKey()));
                System.out.print("| ");
                System.out.print(iterator.getValue());
                Tabulator.spacePrint(1 + copiesLen - String.valueOf(iterator.getValue()).length());
                System.out.print("|\n");
                Tabulator.colThreePrinter(shopIdLen,shopNameLen,copiesLen);
                System.out.print("\n");
            }
            System.out.print("\n");
            return true;
        }
    }

    public boolean reAddCopies(int shopId,int copies) {
        if(sellerListStock.get(shopId)!=null) {
            sellerListStock.merge(shopId,copies,Integer::sum);
            return true;
        }
        return false;
    }
};

class ProductInfo { // this contains auxiliary information associated with a product
    private String name;
    private int manufacturerID;
    private HashMap<Integer,ShopList> stockInfo;
    private long stockSize;

    public ProductInfo(String prodName) {
        this.name = prodName;
        manufacturerID = 0;
        stockInfo = new HashMap<>();
        stockSize = 0;
    }

    public boolean checkLocalStock(int zipcode,int shopId,int copies) {
        boolean b = stockInfo.get(zipcode).checkStockAvailability(shopId,copies);
        if(b) {
            stockSize-=copies;
        }
        return b;
    }

    public void updateStock(int copies,int shopId,int zipcode) {
        stockSize += copies;
        if(stockInfo.get(zipcode)==null) {
            stockInfo.put(zipcode,new ShopList(copies,shopId));
        }
        else {
            stockInfo.get(zipcode).AddShop(shopId,copies);
        }
    }

    public void removeFromStock(int shopId,int zipcode) {
        stockSize -= stockInfo.get(zipcode).clearShopEntry(shopId);
    }

    public void printProdName() {
        System.out.print(name);
    }

    public int getProdNameLength() {
        return name.length();
    }

    public void setManufacturerId(int mfId) {
        manufacturerID = mfId;
    }

    public void clearManufacturerData(int prodId) {
        Manufacturer.removeProduct(manufacturerID,prodId);
    }

    public void clearSellerData(int prodId) {
        for(Map.Entry<Integer,ShopList> iterator : stockInfo.entrySet()) {
            stockInfo.get(iterator.getKey()).clearSellerEntries(prodId);
        }
        stockInfo.clear();
        stockInfo = null;
        stockSize = 0;
    }

    public void increaseStock(int zipcode,int shopId,int copies) {
        if(stockInfo.get(zipcode)!=null) {
            if(stockInfo.get(zipcode).reAddCopies(shopId,copies)) {
                stockSize += copies;
            }
        }
    }

    public String getName() {
        return this.name;
    }

    public boolean isMfAssigned() {
        return (manufacturerID!=0);
    }

    public boolean isMfAbsent() {
        return Manufacturer.isAbsent(manufacturerID);
    }

    public boolean printLocalStocks(int zipcode) {
        if(stockSize==0) {
            System.out.println("<> Sorry no stocks are available for this product.");
            return false;
        }
        else {
            if(stockInfo.get(zipcode)==null) {
                System.out.println("<> Sorry there are no shops/warehouses in this pincode.");
                return false;
            }
            else {
                return stockInfo.get(zipcode).printShopList();
            }
        }
    }
};

class Product { // the database of products is present here
    private static HashMap<Integer,ProductInfo> productData = new HashMap<>();
    private static int dataSize = 0;
    private static int autoIdGenerate = 0;
    private static int prodIdLen = 10;
    private static int prodNameLen = 15;

    public static void assignManufacturer(int mfId, int prodId) {
        productData.get(prodId).setManufacturerId(mfId);
    }

    public static boolean isAbsent(int prodId) {
        if(productData.get(prodId)==null) return true;
        else return false;
    }

    public static boolean checkAvailability(int productId,int copiesOfProduct,int shopId,int zipcode) {
        return productData.get(productId).checkLocalStock(zipcode,shopId,copiesOfProduct);
    }

    public static void updateStockEntries(int prodId,int copies,int shopId,int zipcode) {
        productData.get(prodId).updateStock(copies,shopId,zipcode);
    }

    public static boolean printStockInfo(int productId,int zipcode) {
        if(productData.get(productId)==null) {
            System.out.println("<> Sorry such a product ID is unavailable in the database.");
            return false;
        }
        else {
            return productData.get(productId).printLocalStocks(zipcode);
        }
    }

    public static void clearStockEntry(int prodId,int shopId,int zipcode) {
        productData.get(prodId).removeFromStock(shopId,zipcode);
    }

    public static void createNewProduct() {
        System.out.print("\n");
        System.out.println("<> Creating New Product.");
        ++dataSize;
        ++autoIdGenerate;
        int prodId = autoIdGenerate;
        Scanner scObj = new Scanner(System.in);
        System.out.print("Assigned product ID : " + prodId);
        System.out.print("\nEnter product Name : ");
        String prodName = scObj.nextLine();
        productData.put(prodId,new ProductInfo(prodName));
        prodIdLen = (prodIdLen > String.valueOf(prodId).length()) ? prodIdLen : String.valueOf(prodId).length();
        prodNameLen = (prodNameLen > prodName.length()) ? prodNameLen : prodName.length();
        System.out.println("<> Product successfully created and added to database.");
        System.out.print("\n");
    }

    public static void printAllProductList() {
        System.out.print("\n");
        if(dataSize == 0) {
            System.out.println("<> Sorry there are no products present in database.");
            return ;
        }
        System.out.println("<> Printing list of products present in database.");
        Tabulator.colTwoPrinter(prodIdLen,prodNameLen);
        System.out.print("\n| Product ID");
        Tabulator.spacePrint(prodIdLen-9);
        System.out.print("| Name of Product");
        Tabulator.spacePrint(prodNameLen-14);
        System.out.print("|");
        System.out.print("\n");
        Tabulator.colTwoPrinter(prodIdLen,prodNameLen);
        System.out.print("\n");

        for(Map.Entry<Integer,ProductInfo> iterator : productData.entrySet()) {
            System.out.print("| " + iterator.getKey());
            Tabulator.spacePrint(1 + prodIdLen - String.valueOf(iterator.getKey()).length());
            System.out.print("| ");
            iterator.getValue().printProdName();
            Tabulator.spacePrint(1 + prodNameLen - iterator.getValue().getProdNameLength());
            System.out.print("| ");
            if(!iterator.getValue().isMfAssigned()) System.out.print("<- Currently does not have a manufacturer.");
            else if(iterator.getValue().isMfAbsent()) System.out.print("<- Currently the assigned manufacturer is absent from the database.");
            System.out.print("\n");
            Tabulator.colTwoPrinter(prodIdLen,prodNameLen);
            System.out.print("\n");
        }
        System.out.print("\n");
    }

    public static void deleteProduct() {
        System.out.print("\n");
        if(dataSize == 0) {
            System.out.println("<> Sorry there are no products present in database.");
            return ;
        }
        System.out.println("<> These are the products in the database. Enter the product ID you want to delete.");
        System.out.println("<> Note that all manufacturer and seller information associated with the product will also get deleted.");
        printAllProductList();
        System.out.print("Enter product ID : ");
        int prodId = ErrorLessInputTaker.takeANumberOtherwiseReturnMinusOne();
        if(prodId==-1) {
            System.out.println("<> Sorry but halting current operation/work due to error/exception in user input.");
            return ;
        }
        if(productData.get(prodId)==null) {
            System.out.println("<> Sorry such a product ID is not present in the database.");
        }
        else {
            productData.get(prodId).clearManufacturerData(prodId);
            productData.get(prodId).clearSellerData(prodId);
            productData.remove(prodId);
            System.out.println("<> Successfully deleted product from database.");
            --dataSize;
        }
    }

    public static String getProductName(int productId) {
        if(productData.get(productId)==null) return null;
        else {
            return productData.get(productId).getName();
        }
    }

    public static boolean isManufacturerAssigned(int prodId) {
        return productData.get(prodId).isMfAssigned();
    }

    public static void releaseStock(int prodId,int zipcode,int shopId,int copies) {
        if(productData.get(prodId)!=null) {
            productData.get(prodId).increaseStock(zipcode,shopId,copies);
        }
    }
};
